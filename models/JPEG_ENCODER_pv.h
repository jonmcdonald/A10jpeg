
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for JPEG_ENCODER.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 4.1.0
//* Generated on: Jan. 27, 2016 06:22:45 PM, (user: mbradley)
//* Automatically merged on: Jan. 27, 2016 06:40:29 PM, (user: mbradley)
//*>


#pragma once

#include "JPEG_ENCODER_model.h"
#include "jpeg.h"
#include "bitstream.h"


using namespace tlm;

//This class inherits from the JPEG_ENCODER_pv_base class
class JPEG_ENCODER_pv : public JPEG_ENCODER_pv_base {
 public:
  typedef esl::tlm_types::Address mb_address_type;
 public:
  // Constructor
  // Do not add parameters here.
  // To add parameters - use the Model Builder form (under PV->Parameters tab)
  SC_HAS_PROCESS(JPEG_ENCODER_pv);
  JPEG_ENCODER_pv(sc_core::sc_module_name module_name); 

 protected:
  ////////////////////////////////////////
  // read callbacks of registers
  ////////////////////////////////////////// 
  unsigned int cb_read_status();
  unsigned int cb_read_start(); 
  
 protected:
  /////////////////////////////////////////
  // write callbacks of registers
  ////////////////////////////////////////// 
  void cb_write_start(unsigned int newValue);  

 protected:
  ////////////////////////////////////////
  // target ports read callbacks
  //////////////////////////////////////// 
  bool slave_callback_read(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned slave_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size); 

 protected:
  ////////////////////////////////////////
  // target ports write callbacks
  //////////////////////////////////////// 
  bool slave_callback_write(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned slave_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size); 
  virtual void cb_transport_dbg_status(tlm::tlm_generic_payload& trans);
  virtual void cb_transport_dbg_start(tlm::tlm_generic_payload& trans); 
  bool slave_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData);   

  //----------------------------
  // user code:
  //----------------------------

  // JPEG process specific sub-image size, result write block burst size is arbitrary
  enum { BLOCK_WIDTH=8, BLOCK_HEIGHT=8, BLOCK_SIZE=64, WRITE_BLOCK_SIZE=BLOCK_SIZE*4 };

  rgb_t           rgb[BLOCK_SIZE];           // 8x8 RGB block (R:0, G:1, B:2)
  codes_t         codes[BLOCK_SIZE];         // array of Huffman codes
  unsigned        imageReadData[BLOCK_SIZE];
  unsigned char   imageWriteData[WRITE_BLOCK_SIZE];

  ac_channel<rgb_t>         rgbstream;   // streamed array of RGB pixels 
  ac_channel<codes_t>       hufstream;   // streamed array of Huffman codes
  ac_channel<uint2>         blocktype;

  mb::mb_fifo<unsigned> mbFifo;
  bool                  jpegRunning;
  unsigned long long    dmaReadAddr, dmaWriteAddr;
  unsigned              imageWriteIndex;
  unsigned              width, height;
  unsigned              numBlocks;
  void thread();
  bitstream             fp;

};

