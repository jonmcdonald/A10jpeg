
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for H264_DECODER.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 4.1.0
//* Generated on: Jan. 27, 2016 02:55:25 PM, (user: mbradley)
//*>



#include "H264_DECODER_pv.h"
#include <iostream>

using namespace sc_core;
using namespace sc_dt;
using namespace std;

//constructor
H264_DECODER_pv::H264_DECODER_pv(sc_module_name module_name) 
  : H264_DECODER_pv_base(module_name) {
} 

/////////////////////////////////////////////////////////////////////////////////
// Use these functions to define the behavior of your model when there is a 
// read event on one of the registers as defined in the Model Builder form.
// These functions are called before the read callbacks on the port.
///////////////////////////////////////////////////////////////////////////////// 

// Read callback for frame_done register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned long long H264_DECODER_pv::cb_read_frame_done() {
  
  return frame_done;
}
  

/////////////////////////////////////////////////////////////////////////////////
// Use these functions to define the behavior of your model when there is a 
// write event on one of the registers as defined in the Model Builder form.
// These functions are called before the write callbacks on the port.
///////////////////////////////////////////////////////////////////////////////// 

// Write callback for start register.
// The newValue has been already assigned to the start register.
void H264_DECODER_pv::cb_write_start(unsigned long long newValue) {
  
}
 

// Write callback for stop register.
// The newValue has been already assigned to the stop register.
void H264_DECODER_pv::cb_write_stop(unsigned long long newValue) {
  
}
 

// Write callback for frame_done register.
// The newValue has been already assigned to the frame_done register.
void H264_DECODER_pv::cb_write_frame_done(unsigned long long newValue) {
  
}
    

// Read callback for slave port.
// Returns true when successful.
bool H264_DECODER_pv::slave_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}

// Write callback for slave port.
// Returns true when successful.
bool H264_DECODER_pv::slave_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
} 




unsigned H264_DECODER_pv::slave_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned H264_DECODER_pv::slave_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool H264_DECODER_pv::slave_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}

 
void H264_DECODER_pv::cb_transport_dbg_start(tlm::tlm_generic_payload& trans) {}
void H264_DECODER_pv::cb_transport_dbg_stop(tlm::tlm_generic_payload& trans) {}
void H264_DECODER_pv::cb_transport_dbg_frame_done(tlm::tlm_generic_payload& trans) {}
