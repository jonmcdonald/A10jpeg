
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/
//=================================================================================
// VIVY (VIsta VerifY) Vista template for connecting with RTL simulation/emulation
// History:
// 7/10/2015  v1.0  Initial Release  Mike Bradley 
//
//=================================================================================

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for vivy_jpeg.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 4.1.0
//* Generated on: Jan. 27, 2016 02:55:26 PM, (user: mbradley)
//*>


#pragma once
#include "vivy_jpeg_model.h"
#include "uvmc.h"
// May need "tlm2/tlm_utils" to find the simple sockets (e.g. for NCsim)
#include <tlm_utils/simple_initiator_socket.h>
#include <tlm_utils/simple_target_socket.h>

// Note: To debug UVM Connect interprocess calls: 
//       "setenv XL_TLM_ENABLE_IPC_SNOOPING yes" on Vista and/or Verilog side

using namespace tlm; 

// Uncomment #defines below for those target busses that implement debug transactions
// This is implemented as a separate UVM Connect socket to Verilog 
//#define ENABLE_jpeg_dma_v2r_DEBUG_SOCKET

//This class inherits from the vivy_jpeg_pv_base class
class vivy_jpeg_pv : public vivy_jpeg_pv_base {

  SC_HAS_PROCESS(vivy_jpeg_pv);
 public:
  // Constructor
  // Do not add parameters here.
  // To add parameters - use the Model Builder form (under PV->Parameters tab)
  vivy_jpeg_pv(sc_module_name module_name);   
 
 
 ////////////////////////////////////////////////////////////
 // target port TLM transaction access, and socket to UVM
 ////////////////////////////////////////////////////////////
 protected:
  virtual void jpeg_dma_v2r_callback(tlm::tlm_base_protocol_types::tlm_payload_type& trans, sc_core::sc_time& t);
  tlm::tlm_sync_enum jpeg_dma_v2r_nb_transport_bw(tlm::tlm_generic_payload& trans, tlm::tlm_phase& phase, sc_core::sc_time& delay);
  tlm_utils::simple_initiator_socket<vivy_jpeg_pv>* jpeg_dma_v2r_socket_to_uvmc;
  #ifdef ENABLE_jpeg_dma_v2r_DEBUG_SOCKET 
    tlm_utils::simple_initiator_socket<vivy_jpeg_pv>* jpeg_dma_v2r_debug_socket_to_uvmc;
  #endif 


 
 /////////////////////////////////////////////////////
 // signals in callbacks and initiator to UVM Connect
 ///////////////////////////////////////////////////// 
 protected:
  void jpeg_irq_v2r_callback();
  tlm::tlm_base_protocol_types::tlm_payload_type jpeg_irq_v2r_trans;  // used in callback
  tlm::tlm_sync_enum jpeg_irq_v2r_nb_transport_bw(tlm::tlm_generic_payload& trans, tlm::tlm_phase& phase, sc_core::sc_time& delay);
  tlm_utils::simple_initiator_socket<vivy_jpeg_pv>* jpeg_irq_v2r_socket_to_uvmc; 

 ///////////////////////////////////////////////////////////
 // Master port socket and socket callback from UVM Connect
 ///////////////////////////////////////////////////////////
 protected:
  tlm_utils::simple_target_socket<vivy_jpeg_pv>* jpeg_regs_r2v_socket_from_uvmc;
  void jpeg_regs_r2v_b_transport(tlm::tlm_generic_payload& trans, sc_core::sc_time& delay);
  tlm::tlm_sync_enum jpeg_regs_r2v_nb_transport_fw(tlm::tlm_generic_payload& trans, tlm::tlm_phase& phase, sc_core::sc_time& delay);  


 ///////////////////////////////////////////////////////////////
 // debug and dmi callbacks for target TLM ports (return false)
 ///////////////////////////////////////////////////////////////
 protected: 
  unsigned jpeg_dma_v2r_callback_read_dbg(config::uint64 address, unsigned char* data, unsigned size);
  unsigned jpeg_dma_v2r_callback_write_dbg(config::uint64 address, unsigned char* data, unsigned size);
  bool jpeg_dma_v2r_get_direct_memory_ptr(config::uint64 address, tlm::tlm_dmi& dmiData); 

 ///////////////////////////////////////////////////////////////
 // functions, threads, data for VIVY operation
 ///////////////////////////////////////////////////////////////

  vector<string> uvmcConnectNames;

};
