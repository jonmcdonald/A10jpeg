
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for RST_CLK_CTRL.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 4.1.0
//* Generated on: Jan. 27, 2016 02:55:25 PM, (user: mbradley)
//*>


#pragma once

#include "RST_CLK_CTRL_model.h"

using namespace tlm;

//This class inherits from the RST_CLK_CTRL_pv_base class
class RST_CLK_CTRL_pv : public RST_CLK_CTRL_pv_base {
 public:
  typedef esl::tlm_types::Address mb_address_type;
 public:
  // Constructor
  // Do not add parameters here.
  // To add parameters - use the Model Builder form (under PV->Parameters tab)
  SC_HAS_PROCESS(RST_CLK_CTRL_pv);
  RST_CLK_CTRL_pv(sc_core::sc_module_name module_name);  
  
 protected:
  /////////////////////////////////////////
  // write callbacks of registers
  ////////////////////////////////////////// 
  void cb_write_uart_vis0_ctrl_reg(unsigned int newValue);  

 protected:
  ////////////////////////////////////////
  // target ports read callbacks
  //////////////////////////////////////// 
  bool slave0_callback_read(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned slave0_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size); 

 protected:
  ////////////////////////////////////////
  // target ports write callbacks
  //////////////////////////////////////// 
  bool slave0_callback_write(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned slave0_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size); 
  virtual void cb_transport_dbg_uart_vis0_ctrl_reg(tlm::tlm_generic_payload& trans); 
  bool slave0_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData);   
};

