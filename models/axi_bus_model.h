
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file is write protected. 
//* DO NOT MODIFY THIS FILE.
//*
//* This file is generated according to the parameters in the 
//* Model Builder form.
//* This class contains the infrastructure to define the behavior of the component.
//* The axi_bus_pv will be derived from this class.
//*
//* Model Builder version: 4.1.0
//* Generated on: Feb. 01, 2016 10:58:30 AM, (user: mbradley)
//*>



#pragma once

#include "model_builder.h"

#ifdef MODEL_BUILDER_VERSION_NUMBER
#if 4100 != MODEL_BUILDER_VERSION_NUMBER
#error "This model was generated using Model Builder version: 4.1.0. Please regenerate model."
#endif
#else
#error "Please regenerate model."
#endif




#include "axi_protocol.h"

using namespace ::tlm;

class axi_bus_pv_base;
class axi_bus_pv_base_mb_compatibility : public mb::mb_module {
  friend class axi_bus_pv_base;
 public:
  typedef unsigned int mb_address_type;
 protected:
  axi_bus_pv_base_mb_compatibility(sc_core::sc_module_name& module_name)
    : mb::mb_module(module_name) {}

  ////////////////////////////////////////
  // functions for target port: driver
  ////////////////////////////////////////
  protected:
   virtual bool driver_callback_read(mb_address_type address,
                                                      unsigned char* data,
                                                      unsigned size) {
     return true;
   } 
   virtual bool driver_callback_write(mb_address_type address,
                                                       unsigned char* data,
                                                       unsigned size) {
     return true;
   } 
   virtual unsigned driver_callback_read_dbg(mb_address_type address,
                                                              unsigned char* data,
                                                              unsigned size) {
     return 0;
   } 
   virtual unsigned driver_callback_write_dbg(mb_address_type address,
                                                               unsigned char* data,
                                                               unsigned size) {
     return 0;
   }
   virtual bool driver_get_direct_memory_ptr(mb_address_type address,
                                                              tlm::tlm_dmi& dmiData) {
     return false;
   }
  ////////////////////////////////////////
  // functions for target port: jpeg_dma
  ////////////////////////////////////////
  protected:
   virtual bool jpeg_dma_callback_read(mb_address_type address,
                                                      unsigned char* data,
                                                      unsigned size) {
     return true;
   } 
   virtual bool jpeg_dma_callback_write(mb_address_type address,
                                                       unsigned char* data,
                                                       unsigned size) {
     return true;
   } 
   virtual unsigned jpeg_dma_callback_read_dbg(mb_address_type address,
                                                              unsigned char* data,
                                                              unsigned size) {
     return 0;
   } 
   virtual unsigned jpeg_dma_callback_write_dbg(mb_address_type address,
                                                               unsigned char* data,
                                                               unsigned size) {
     return 0;
   }
   virtual bool jpeg_dma_get_direct_memory_ptr(mb_address_type address,
                                                              tlm::tlm_dmi& dmiData) {
     return false;
   } 
};

class axi_bus_pv_base_parameters {
 public :
  axi_bus_pv_base_parameters(sc_object* object);
  void print_parameters();

 protected:
  sc_object* m_object;

  sc_core::sc_time clock;
  sc_core::sc_time axi_clock;
  double nominal_voltage;
  bool verbose_parameters;
  bool dmi_enabled;
  const char* warning_level;
  const char* layers;
  const char* slave_sets;
  unsigned int write_broadcast;
  unsigned int driver_priority;
  const char* driver_vmap;
  unsigned int sram_master_priority;
  unsigned long long sram_master_base_address;
  unsigned long long sram_master_size;
  unsigned int sram_master_subtract_base_address;
  unsigned int sram_master_secure;
  const char* sram_master_additional_ranges;
  unsigned int sram_master_latency;
  unsigned int jpeg_dma_priority;
  const char* jpeg_dma_vmap;
  unsigned int jpeg_regs_priority;
  unsigned long long jpeg_regs_base_address;
  unsigned long long jpeg_regs_size;
  unsigned int jpeg_regs_subtract_base_address;
  unsigned int jpeg_regs_secure;
  const char* jpeg_regs_additional_ranges;
  unsigned int jpeg_regs_latency;
};

class axi_bus_pv_base : public axi_bus_pv_base_mb_compatibility,
                           public axi_bus_pv_base_parameters
{
 private:
  typedef axi_bus_pv_base_mb_compatibility mb_compatibility_class;
  typedef axi_bus_pv_base_mb_compatibility BASE_TYPE;
 public:
  typedef esl::tlm_types::Address mb_address_type;
 public:
  typedef axi_bus_pv_base self;
  SC_HAS_PROCESS(axi_bus_pv_base);
  axi_bus_pv_base(sc_core::sc_module_name& module_name);
  virtual void reset_model();
  enum port_enum {driver_idx,sram_master_idx,jpeg_dma_idx,jpeg_regs_idx };
  
 private:

  mb::tlm20::bw_process<tlm::tlm_base_protocol_types> m_sram_master_bw_process;
  mb::tlm20::bw_process<tlm::tlm_base_protocol_types> m_jpeg_regs_bw_process;
  mb::tlm20::fw_process<tlm::tlm_base_protocol_types> m_driver_fw_process;
  mb::tlm20::fw_process<tlm::tlm_base_protocol_types> m_jpeg_dma_fw_process;

 protected:

  virtual void driver_callback(tlm::tlm_base_protocol_types::tlm_payload_type& trans, sc_core::sc_time& t) {
    bool status;

    if (trans.get_byte_enable_ptr() && trans.get_byte_enable_length()) {
      std::stringstream str;
      str << std::showbase << std::hex;
      if (trans.is_write())
        str << "writing to address " << trans.get_address() << " : byte enable pointer defined but not used ";
      else
        str << "reading from address " << trans.get_address() << " : byte enable pointer defined but not used ";
      mb::sysc::complain(str.str().c_str(), this->name());
    }
    payload_for_token = &trans;
    
    if (trans.is_write()) {
      status = driver_callback_write(trans.get_address(), trans.get_data_ptr(), trans.get_data_length());
    } else if (trans.is_read()) {
      status = driver_callback_read(trans.get_address(), trans.get_data_ptr(), trans.get_data_length());
    } else {
      status = false;
    }
    payload_for_token = 0;

    tlm::tlm_response_status trans_status = trans.get_response_status();
    if (trans_status == tlm::TLM_INCOMPLETE_RESPONSE ||
        trans_status == tlm::TLM_OK_RESPONSE)
      trans.set_response_status(status ? TLM_OK_RESPONSE : TLM_GENERIC_ERROR_RESPONSE);
  }

  virtual unsigned driver_callback_dbg(tlm::tlm_base_protocol_types::tlm_payload_type& trans) {
    
    unsigned status = 0;
    if (trans.is_write()) {
      status = driver_callback_write_dbg(trans.get_address(), trans.get_data_ptr(), trans.get_data_length());
    } else if (trans.is_read()) {
      status = driver_callback_read_dbg(trans.get_address(), trans.get_data_ptr(), trans.get_data_length());
    } 

    return status;
  }

  virtual bool driver_get_direct_memory_ptr_callback(tlm::tlm_base_protocol_types::tlm_payload_type& trans,
                                                                      tlm::tlm_dmi& dmiData) {
    if (trans.get_command() == tlm::TLM_IGNORE_COMMAND)
      return false;
    payload_on_stack = &trans;
    bool ret_value = driver_get_direct_memory_ptr(trans.get_address(), dmiData);
    if (ret_value) {
      get_dmi_delay_cb(trans, dmiData, driver_idx);
    }
    payload_on_stack = 0;
    return ret_value;
  }
  virtual void jpeg_dma_callback(tlm::tlm_base_protocol_types::tlm_payload_type& trans, sc_core::sc_time& t) {
    bool status;

    if (trans.get_byte_enable_ptr() && trans.get_byte_enable_length()) {
      std::stringstream str;
      str << std::showbase << std::hex;
      if (trans.is_write())
        str << "writing to address " << trans.get_address() << " : byte enable pointer defined but not used ";
      else
        str << "reading from address " << trans.get_address() << " : byte enable pointer defined but not used ";
      mb::sysc::complain(str.str().c_str(), this->name());
    }
    payload_for_token = &trans;
    
    if (trans.is_write()) {
      status = jpeg_dma_callback_write(trans.get_address(), trans.get_data_ptr(), trans.get_data_length());
    } else if (trans.is_read()) {
      status = jpeg_dma_callback_read(trans.get_address(), trans.get_data_ptr(), trans.get_data_length());
    } else {
      status = false;
    }
    payload_for_token = 0;

    tlm::tlm_response_status trans_status = trans.get_response_status();
    if (trans_status == tlm::TLM_INCOMPLETE_RESPONSE ||
        trans_status == tlm::TLM_OK_RESPONSE)
      trans.set_response_status(status ? TLM_OK_RESPONSE : TLM_GENERIC_ERROR_RESPONSE);
  }

  virtual unsigned jpeg_dma_callback_dbg(tlm::tlm_base_protocol_types::tlm_payload_type& trans) {
    
    unsigned status = 0;
    if (trans.is_write()) {
      status = jpeg_dma_callback_write_dbg(trans.get_address(), trans.get_data_ptr(), trans.get_data_length());
    } else if (trans.is_read()) {
      status = jpeg_dma_callback_read_dbg(trans.get_address(), trans.get_data_ptr(), trans.get_data_length());
    } 

    return status;
  }

  virtual bool jpeg_dma_get_direct_memory_ptr_callback(tlm::tlm_base_protocol_types::tlm_payload_type& trans,
                                                                      tlm::tlm_dmi& dmiData) {
    if (trans.get_command() == tlm::TLM_IGNORE_COMMAND)
      return false;
    payload_on_stack = &trans;
    bool ret_value = jpeg_dma_get_direct_memory_ptr(trans.get_address(), dmiData);
    if (ret_value) {
      get_dmi_delay_cb(trans, dmiData, jpeg_dma_idx);
    }
    payload_on_stack = 0;
    return ret_value;
  }

  virtual void get_dmi_delay_cb(tlm::tlm_generic_payload& trans, tlm::tlm_dmi& dmiData, unsigned port_index) {
    sc_time t = sc_core::SC_ZERO_TIME;
    
    getPVTBaseModel()->get_write_delay_for_dmi(port_index, trans, t);
    dmiData.set_write_latency(t);
    t = sc_core::SC_ZERO_TIME;
    getPVTBaseModel()->get_read_delay_for_dmi(port_index, trans, t);
    dmiData.set_read_latency(t);
    
  }

  virtual void invalidate_direct_mem_ptr_callback(unsigned master_index, sc_dt::uint64 start_range, sc_dt::uint64 end_range) {
  }
  virtual void sram_master_invalidate_direct_mem_ptr_callback(sc_dt::uint64 start_range, sc_dt::uint64 end_range) {
  }
  virtual void jpeg_regs_invalidate_direct_mem_ptr_callback(sc_dt::uint64 start_range, sc_dt::uint64 end_range) {
  }

  

  



  

  
  

 public:

  ////////////////////////////////////////
  // functions for initiator port: sram_master
  ////////////////////////////////////////
  bool sram_master_transport(tlm::tlm_base_protocol_types::tlm_payload_type& trans) {
    sc_core::sc_time t;
    trans.set_response_status(tlm::TLM_INCOMPLETE_RESPONSE);
    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    sram_master->b_transport(trans, t);
    return trans.get_response_status() == tlm::TLM_OK_RESPONSE;
  }

   
  bool sram_master_read(mb_address_type address, unsigned char* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*sram_master[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool sram_master_read(mb_address_type address, unsigned short* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*sram_master[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool sram_master_read(mb_address_type address, unsigned int* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*sram_master[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool sram_master_read(mb_address_type address, sc_dt::uint64* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*sram_master[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool sram_master_read(mb_address_type address, char* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*sram_master[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool sram_master_read(mb_address_type address, short* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*sram_master[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool sram_master_read(mb_address_type address, int* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*sram_master[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool sram_master_read(mb_address_type address, sc_dt::int64* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*sram_master[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  }   
  
  bool sram_master_write(mb_address_type address,unsigned char* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*sram_master[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool sram_master_write(mb_address_type address,unsigned short* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*sram_master[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool sram_master_write(mb_address_type address,unsigned int* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*sram_master[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool sram_master_write(mb_address_type address,sc_dt::uint64* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*sram_master[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool sram_master_write(mb_address_type address,char* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*sram_master[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool sram_master_write(mb_address_type address,short* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*sram_master[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool sram_master_write(mb_address_type address,int* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*sram_master[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool sram_master_write(mb_address_type address,sc_dt::int64* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*sram_master[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  }  

  bool sram_master_read(mb_address_type address,unsigned char& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*sram_master[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool sram_master_read(mb_address_type address,unsigned short& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*sram_master[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool sram_master_read(mb_address_type address,unsigned int& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*sram_master[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool sram_master_read(mb_address_type address,sc_dt::uint64& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*sram_master[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool sram_master_read(mb_address_type address,char& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*sram_master[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool sram_master_read(mb_address_type address,short& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*sram_master[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool sram_master_read(mb_address_type address,int& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*sram_master[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool sram_master_read(mb_address_type address,sc_dt::int64& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*sram_master[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }  
  
  bool sram_master_write(mb_address_type address,unsigned char data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*sram_master[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool sram_master_write(mb_address_type address,unsigned short data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*sram_master[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool sram_master_write(mb_address_type address,unsigned int data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*sram_master[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool sram_master_write(mb_address_type address,sc_dt::uint64 data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*sram_master[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool sram_master_write(mb_address_type address,char data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*sram_master[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool sram_master_write(mb_address_type address,short data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*sram_master[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool sram_master_write(mb_address_type address,int data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*sram_master[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool sram_master_write(mb_address_type address,sc_dt::int64 data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*sram_master[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  } 

  ////////////////////////////////////////
  // functions for initiator port: jpeg_regs
  ////////////////////////////////////////
  bool jpeg_regs_transport(tlm::tlm_base_protocol_types::tlm_payload_type& trans) {
    sc_core::sc_time t;
    trans.set_response_status(tlm::TLM_INCOMPLETE_RESPONSE);
    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    jpeg_regs->b_transport(trans, t);
    return trans.get_response_status() == tlm::TLM_OK_RESPONSE;
  }

   
  bool jpeg_regs_read(mb_address_type address, unsigned char* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*jpeg_regs[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool jpeg_regs_read(mb_address_type address, unsigned short* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*jpeg_regs[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool jpeg_regs_read(mb_address_type address, unsigned int* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*jpeg_regs[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool jpeg_regs_read(mb_address_type address, sc_dt::uint64* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*jpeg_regs[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool jpeg_regs_read(mb_address_type address, char* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*jpeg_regs[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool jpeg_regs_read(mb_address_type address, short* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*jpeg_regs[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool jpeg_regs_read(mb_address_type address, int* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*jpeg_regs[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool jpeg_regs_read(mb_address_type address, sc_dt::int64* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*jpeg_regs[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  }   
  
  bool jpeg_regs_write(mb_address_type address,unsigned char* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*jpeg_regs[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool jpeg_regs_write(mb_address_type address,unsigned short* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*jpeg_regs[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool jpeg_regs_write(mb_address_type address,unsigned int* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*jpeg_regs[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool jpeg_regs_write(mb_address_type address,sc_dt::uint64* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*jpeg_regs[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool jpeg_regs_write(mb_address_type address,char* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*jpeg_regs[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool jpeg_regs_write(mb_address_type address,short* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*jpeg_regs[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool jpeg_regs_write(mb_address_type address,int* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*jpeg_regs[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool jpeg_regs_write(mb_address_type address,sc_dt::int64* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*jpeg_regs[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  }  

  bool jpeg_regs_read(mb_address_type address,unsigned char& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*jpeg_regs[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool jpeg_regs_read(mb_address_type address,unsigned short& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*jpeg_regs[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool jpeg_regs_read(mb_address_type address,unsigned int& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*jpeg_regs[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool jpeg_regs_read(mb_address_type address,sc_dt::uint64& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*jpeg_regs[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool jpeg_regs_read(mb_address_type address,char& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*jpeg_regs[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool jpeg_regs_read(mb_address_type address,short& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*jpeg_regs[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool jpeg_regs_read(mb_address_type address,int& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*jpeg_regs[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool jpeg_regs_read(mb_address_type address,sc_dt::int64& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*jpeg_regs[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }  
  
  bool jpeg_regs_write(mb_address_type address,unsigned char data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*jpeg_regs[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool jpeg_regs_write(mb_address_type address,unsigned short data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*jpeg_regs[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool jpeg_regs_write(mb_address_type address,unsigned int data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*jpeg_regs[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool jpeg_regs_write(mb_address_type address,sc_dt::uint64 data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*jpeg_regs[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool jpeg_regs_write(mb_address_type address,char data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*jpeg_regs[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool jpeg_regs_write(mb_address_type address,short data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*jpeg_regs[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool jpeg_regs_write(mb_address_type address,int data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*jpeg_regs[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool jpeg_regs_write(mb_address_type address,sc_dt::int64 data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*jpeg_regs[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  } 



  ///////////////////////////////////////
  // dbg functions for port: sram_master
  /////////////////////////////////////// 
  
  
  unsigned sram_master_read_dbg(mb_address_type address, unsigned char* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*sram_master[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned sram_master_read_dbg(mb_address_type address, unsigned short* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*sram_master[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned sram_master_read_dbg(mb_address_type address, unsigned int* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*sram_master[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned sram_master_read_dbg(mb_address_type address, sc_dt::uint64* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*sram_master[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned sram_master_read_dbg(mb_address_type address, char* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*sram_master[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned sram_master_read_dbg(mb_address_type address, short* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*sram_master[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned sram_master_read_dbg(mb_address_type address, int* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*sram_master[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned sram_master_read_dbg(mb_address_type address, sc_dt::int64* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*sram_master[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned sram_master_write_dbg(mb_address_type address, unsigned char* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*sram_master[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned sram_master_write_dbg(mb_address_type address, unsigned short* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*sram_master[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned sram_master_write_dbg(mb_address_type address, unsigned int* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*sram_master[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned sram_master_write_dbg(mb_address_type address, sc_dt::uint64* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*sram_master[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned sram_master_write_dbg(mb_address_type address, char* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*sram_master[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned sram_master_write_dbg(mb_address_type address, short* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*sram_master[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned sram_master_write_dbg(mb_address_type address, int* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*sram_master[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned sram_master_write_dbg(mb_address_type address, sc_dt::int64* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*sram_master[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  
  unsigned sram_master_read_dbg(mb_address_type address, unsigned char& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*sram_master[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned sram_master_read_dbg(mb_address_type address, unsigned short& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*sram_master[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned sram_master_read_dbg(mb_address_type address, unsigned int& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*sram_master[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned sram_master_read_dbg(mb_address_type address, sc_dt::uint64& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*sram_master[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned sram_master_read_dbg(mb_address_type address, char& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*sram_master[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned sram_master_read_dbg(mb_address_type address, short& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*sram_master[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned sram_master_read_dbg(mb_address_type address, int& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*sram_master[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned sram_master_read_dbg(mb_address_type address, sc_dt::int64& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*sram_master[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned sram_master_write_dbg(mb_address_type address, unsigned char data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*sram_master[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned sram_master_write_dbg(mb_address_type address, unsigned short data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*sram_master[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned sram_master_write_dbg(mb_address_type address, unsigned int data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*sram_master[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned sram_master_write_dbg(mb_address_type address, sc_dt::uint64 data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*sram_master[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned sram_master_write_dbg(mb_address_type address, char data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*sram_master[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned sram_master_write_dbg(mb_address_type address, short data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*sram_master[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned sram_master_write_dbg(mb_address_type address, int data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*sram_master[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned sram_master_write_dbg(mb_address_type address, sc_dt::int64 data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*sram_master[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  } 

  ///////////////////////////////////////
  // dbg functions for port: jpeg_regs
  /////////////////////////////////////// 
  
  
  unsigned jpeg_regs_read_dbg(mb_address_type address, unsigned char* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*jpeg_regs[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned jpeg_regs_read_dbg(mb_address_type address, unsigned short* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*jpeg_regs[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned jpeg_regs_read_dbg(mb_address_type address, unsigned int* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*jpeg_regs[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned jpeg_regs_read_dbg(mb_address_type address, sc_dt::uint64* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*jpeg_regs[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned jpeg_regs_read_dbg(mb_address_type address, char* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*jpeg_regs[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned jpeg_regs_read_dbg(mb_address_type address, short* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*jpeg_regs[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned jpeg_regs_read_dbg(mb_address_type address, int* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*jpeg_regs[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned jpeg_regs_read_dbg(mb_address_type address, sc_dt::int64* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*jpeg_regs[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned jpeg_regs_write_dbg(mb_address_type address, unsigned char* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*jpeg_regs[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned jpeg_regs_write_dbg(mb_address_type address, unsigned short* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*jpeg_regs[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned jpeg_regs_write_dbg(mb_address_type address, unsigned int* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*jpeg_regs[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned jpeg_regs_write_dbg(mb_address_type address, sc_dt::uint64* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*jpeg_regs[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned jpeg_regs_write_dbg(mb_address_type address, char* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*jpeg_regs[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned jpeg_regs_write_dbg(mb_address_type address, short* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*jpeg_regs[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned jpeg_regs_write_dbg(mb_address_type address, int* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*jpeg_regs[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned jpeg_regs_write_dbg(mb_address_type address, sc_dt::int64* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*jpeg_regs[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  
  unsigned jpeg_regs_read_dbg(mb_address_type address, unsigned char& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*jpeg_regs[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned jpeg_regs_read_dbg(mb_address_type address, unsigned short& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*jpeg_regs[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned jpeg_regs_read_dbg(mb_address_type address, unsigned int& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*jpeg_regs[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned jpeg_regs_read_dbg(mb_address_type address, sc_dt::uint64& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*jpeg_regs[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned jpeg_regs_read_dbg(mb_address_type address, char& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*jpeg_regs[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned jpeg_regs_read_dbg(mb_address_type address, short& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*jpeg_regs[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned jpeg_regs_read_dbg(mb_address_type address, int& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*jpeg_regs[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned jpeg_regs_read_dbg(mb_address_type address, sc_dt::int64& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*jpeg_regs[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned jpeg_regs_write_dbg(mb_address_type address, unsigned char data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*jpeg_regs[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned jpeg_regs_write_dbg(mb_address_type address, unsigned short data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*jpeg_regs[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned jpeg_regs_write_dbg(mb_address_type address, unsigned int data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*jpeg_regs[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned jpeg_regs_write_dbg(mb_address_type address, sc_dt::uint64 data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*jpeg_regs[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned jpeg_regs_write_dbg(mb_address_type address, char data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*jpeg_regs[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned jpeg_regs_write_dbg(mb_address_type address, short data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*jpeg_regs[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned jpeg_regs_write_dbg(mb_address_type address, int data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*jpeg_regs[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned jpeg_regs_write_dbg(mb_address_type address, sc_dt::int64 data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*jpeg_regs[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  } 


  tlm::tlm_generic_payload* payload_on_stack;
  tlm::tlm_generic_payload* payload_for_token;

  ////////////////////////////////////////
  // request DMI for port: sram_master
  ////////////////////////////////////////
  bool sram_master_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmi_data) {
    tlm::tlm_generic_payload* trans = payload_on_stack;
    if (!payload_on_stack)
      trans = mb::tlm20::get_object_pull().new_payload();

    bool retv = false;

    {
      mb::tlm20::save_payload<tlm::tlm_generic_payload> save(*trans);
      trans->set_command(tlm::TLM_READ_COMMAND);
      trans->set_address(address);
      retv = sram_master->get_direct_mem_ptr(*trans, dmi_data);
    }
    if (!payload_on_stack)
      trans->release();
    return retv;
  }

  bool sram_master_get_direct_memory_ptr(tlm::tlm_command command, mb_address_type address, tlm::tlm_dmi& dmi_data) {
    tlm::tlm_generic_payload* trans = payload_on_stack;
    if (!payload_on_stack)
      trans = mb::tlm20::get_object_pull().new_payload();

    trans->set_command(command);
    trans->set_address(address);
    
    bool retv = sram_master->get_direct_mem_ptr(*trans, dmi_data);
    if (!payload_on_stack)
      trans->release();
    return retv;
  }
  ////////////////////////////////////////
  // request DMI for port: jpeg_regs
  ////////////////////////////////////////
  bool jpeg_regs_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmi_data) {
    tlm::tlm_generic_payload* trans = payload_on_stack;
    if (!payload_on_stack)
      trans = mb::tlm20::get_object_pull().new_payload();

    bool retv = false;

    {
      mb::tlm20::save_payload<tlm::tlm_generic_payload> save(*trans);
      trans->set_command(tlm::TLM_READ_COMMAND);
      trans->set_address(address);
      retv = jpeg_regs->get_direct_mem_ptr(*trans, dmi_data);
    }
    if (!payload_on_stack)
      trans->release();
    return retv;
  }

  bool jpeg_regs_get_direct_memory_ptr(tlm::tlm_command command, mb_address_type address, tlm::tlm_dmi& dmi_data) {
    tlm::tlm_generic_payload* trans = payload_on_stack;
    if (!payload_on_stack)
      trans = mb::tlm20::get_object_pull().new_payload();

    trans->set_command(command);
    trans->set_address(address);
    
    bool retv = jpeg_regs->get_direct_mem_ptr(*trans, dmi_data);
    if (!payload_on_stack)
      trans->release();
    return retv;
  }


  ////////////////////////////////////////
  // functions for target port: driver
  ////////////////////////////////////////
  protected:
  virtual bool driver_callback_read(mb_address_type address,
                                                      unsigned char* data,
                                                      unsigned size) {
    mb_address_type local_address = address;
     mb_compatibility_class *This = this;
     return This->driver_callback_read(mb_compatibility_class::mb_address_type(local_address),
                                                        data,
                                                        size);
   }
   virtual bool driver_callback_write(mb_address_type address,
                                                       unsigned char* data,
                                                       unsigned size) {
     mb_address_type local_address = address;
     mb_compatibility_class *This = this;
     return This->driver_callback_write(mb_compatibility_class::mb_address_type(local_address),
                                                         data,
                                                         size);
   }

   virtual unsigned driver_callback_read_dbg(mb_address_type address,
                                                              unsigned char* data,
                                                              unsigned size) {
     mb_compatibility_class *This = this;
     return This->driver_callback_read_dbg(mb_compatibility_class::mb_address_type(address),
                                                            data,
                                                            size);
   }
   virtual unsigned driver_callback_write_dbg(mb_address_type address,
                                                               unsigned char* data,
                                                               unsigned size) {
     mb_compatibility_class *This = this;
     return This->driver_callback_write_dbg(mb_compatibility_class::mb_address_type(address),
                                                             data,
                                                             size);
   }
   virtual bool driver_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
     mb_compatibility_class *This = this;
     return This->driver_get_direct_memory_ptr(mb_compatibility_class::mb_address_type(address), dmiData);
   }
  ////////////////////////////////////////
  // functions for target port: jpeg_dma
  ////////////////////////////////////////
  protected:
  virtual bool jpeg_dma_callback_read(mb_address_type address,
                                                      unsigned char* data,
                                                      unsigned size) {
    mb_address_type local_address = address;
     mb_compatibility_class *This = this;
     return This->jpeg_dma_callback_read(mb_compatibility_class::mb_address_type(local_address),
                                                        data,
                                                        size);
   }
   virtual bool jpeg_dma_callback_write(mb_address_type address,
                                                       unsigned char* data,
                                                       unsigned size) {
     mb_address_type local_address = address;
     mb_compatibility_class *This = this;
     return This->jpeg_dma_callback_write(mb_compatibility_class::mb_address_type(local_address),
                                                         data,
                                                         size);
   }

   virtual unsigned jpeg_dma_callback_read_dbg(mb_address_type address,
                                                              unsigned char* data,
                                                              unsigned size) {
     mb_compatibility_class *This = this;
     return This->jpeg_dma_callback_read_dbg(mb_compatibility_class::mb_address_type(address),
                                                            data,
                                                            size);
   }
   virtual unsigned jpeg_dma_callback_write_dbg(mb_address_type address,
                                                               unsigned char* data,
                                                               unsigned size) {
     mb_compatibility_class *This = this;
     return This->jpeg_dma_callback_write_dbg(mb_compatibility_class::mb_address_type(address),
                                                             data,
                                                             size);
   }
   virtual bool jpeg_dma_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
     mb_compatibility_class *This = this;
     return This->jpeg_dma_get_direct_memory_ptr(mb_compatibility_class::mb_address_type(address), dmiData);
   } 

   
  
  
 

 public:
  typedef tlm::tlm_base_protocol_types sram_master_protocol_types;
  typedef tlm::tlm_base_protocol_types jpeg_regs_protocol_types;
  typedef tlm::tlm_base_protocol_types driver_protocol_types;
  typedef tlm::tlm_base_protocol_types jpeg_dma_protocol_types;
  typedef tlm::tlm_base_protocol_types::tlm_payload_type sram_master_payload_type;
  typedef tlm::tlm_base_protocol_types::tlm_payload_type jpeg_regs_payload_type;
  typedef tlm::tlm_base_protocol_types::tlm_payload_type driver_payload_type;
  typedef tlm::tlm_base_protocol_types::tlm_payload_type jpeg_dma_payload_type;

 public:
  // port declarations 

  tlm::tlm_initiator_socket <32, tlm::tlm_base_protocol_types> sram_master;
  tlm::tlm_initiator_socket <32, tlm::tlm_base_protocol_types> jpeg_regs;
  tlm::tlm_target_socket <32, tlm::tlm_base_protocol_types> driver;
  tlm::tlm_target_socket <32, tlm::tlm_base_protocol_types> jpeg_dma;  

    
 public:
  void send_b_transport(unsigned port_index, tlm::tlm_generic_payload& trans, sc_core::sc_time& t) {
    if (port_index > get_port_count() || !is_master(port_index))
      return;
    switch (port_index) {
    case sram_master_idx:
      sram_master->b_transport(trans, t);
    case jpeg_regs_idx:
      jpeg_regs->b_transport(trans, t);
    }
  }

  unsigned send_transport_dbg(unsigned port_index, tlm::tlm_generic_payload& trans) {
    if (port_index > get_port_count() || !is_master(port_index))
      return 0;
    switch (port_index) {
    case sram_master_idx:
      return sram_master->transport_dbg(trans);
    case jpeg_regs_idx:
      return jpeg_regs->transport_dbg(trans);
    }
    return 0;
  }
  
  

 public:
  mb::mb_token_ptr get_current_token() {
    mb::mb_token_ptr token_ptr = mb_module::get_current_token();
    if (token_ptr)
      return token_ptr;
    if (payload_for_token) {
      mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*payload_for_token);
      if (extension) {
        mb_module::set_current_token(extension->getToken());
        return extension->getToken();
      }
    }
    return 0;
  }
  

 protected:
};



/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/


#pragma once

#include "axi_bus_model.h"
#include "model_builder.h"
#include <queue>


class axi_bus_base1_pv : public axi_bus_pv_base,
         public mb::sysc::ParameterListener {
public:
  SC_HAS_PROCESS(axi_bus_base1_pv);
  
  axi_bus_base1_pv(sc_module_name module_name); 

  virtual ~axi_bus_base1_pv();

 public:
  tlm::tlm_target_socket<32, tlm::tlm_base_protocol_types,
    1,
    sc_core::SC_ZERO_OR_MORE_BOUND> dbg_port;
  tlm::tlm_target_socket<32, tlm::tlm_base_protocol_types,
    1,
                         sc_core::SC_ZERO_OR_MORE_BOUND>& get_dbg_port() {
    return dbg_port;
  }
private:
  PapoulisBusBaseModel *m_model;
  mb::tlm20::fw_process<tlm::tlm_base_protocol_types> m_dbg_port_fw_process;
public:
  virtual void driver_callback(tlm::tlm_base_protocol_types::tlm_payload_type& trans, sc_core::sc_time& t);
  virtual unsigned driver_callback_dbg(tlm::tlm_base_protocol_types::tlm_payload_type& trans);
  virtual bool driver_get_direct_memory_ptr_callback(tlm::tlm_base_protocol_types::tlm_payload_type& trans, tlm::tlm_dmi& dmiData);
  virtual void jpeg_dma_callback(tlm::tlm_base_protocol_types::tlm_payload_type& trans, sc_core::sc_time& t);
  virtual unsigned jpeg_dma_callback_dbg(tlm::tlm_base_protocol_types::tlm_payload_type& trans);
  virtual bool jpeg_dma_get_direct_memory_ptr_callback(tlm::tlm_base_protocol_types::tlm_payload_type& trans, tlm::tlm_dmi& dmiData);
  void dbg_port_callback(tlm::tlm_base_protocol_types::tlm_payload_type& trans, sc_core::sc_time& t);
  unsigned dbg_port_callback_dbg(tlm::tlm_base_protocol_types::tlm_payload_type& trans); 
  bool dbg_port_get_direct_memory_ptr_callback(tlm::tlm_base_protocol_types::tlm_payload_type& trans, tlm::tlm_dmi& dmiData);

 public: 
  virtual void parameter_changed(const std::string& old_value,
                                 const std::string& new_value);
  virtual void invalidate_direct_mem_ptr_callback(unsigned master_index, sc_dt::uint64 start_range, sc_dt::uint64 end_range);
  virtual void sram_master_invalidate_direct_mem_ptr_callback(sc_dt::uint64 start_range, sc_dt::uint64 end_range);
  virtual void jpeg_regs_invalidate_direct_mem_ptr_callback(sc_dt::uint64 start_range, sc_dt::uint64 end_range);

  void invalidate_direct_mem_ptr(unsigned target_index, sc_dt::uint64 start_range, sc_dt::uint64 end_range);

  void set_secure_payload(esl::sc_sim::secure_payload* inst) {
    decoder->setSecurePayload(inst);
  }
protected:
  unsigned m_port_count;
  unsigned m_layers_count;
  bool     m_is_multi_channel;
  esl::sc_sim::BusScheduler *m_bus_scheduler;
  bool m_apply_policies;

  tlm::tlm_fw_transport_if<tlm::tlm_base_protocol_types>* get_fw_transport_if(unsigned port_index) {
    switch (port_index) {
    case (1):
      return sram_master[0];
    case (3):
      return jpeg_regs[0];
    default:
      std::cerr << "Bad port index requested in get_fw_transport_if: " << port_index << std::endl;
      return 0;
    }
  }

  tlm::tlm_bw_transport_if<tlm::tlm_base_protocol_types>* get_bw_transport_if(unsigned port_index) {
    switch (port_index) {
    case (0):
      return driver[0];
    case (2):
      return jpeg_dma[0];
    default:
      std::cerr << "Bad port index requested in get_fw_transport_if: " << port_index << std::endl;
      return 0;
    }
  }

private:
  template <class Payload>
    unsigned routePayload(Payload& trans, unsigned targetPortIndex, bool isDebug, sc_core::sc_time& t) {    
    bool isNotDebugPort = (targetPortIndex != (unsigned) (-1));
    tlm::tlm_command command = trans.get_command();
    bool read_or_write_command = (command == tlm::TLM_READ_COMMAND)||(command == tlm::TLM_WRITE_COMMAND);
    
    sc_core::sc_time waiting_time(0, SC_MS) ;
    sc_core::sc_time returned_time(0, SC_PS);
    sc_dt::uint64 virtualAddress = trans.get_address();
    
    esl::sc_sim::PVTBaseModel* owner = getPVTBaseModel();

     bool isSchedulerOp = ((m_apply_policies)&&(!isDebug)&&(read_or_write_command)&&(mb::tlm20::is_LT_mode()));
     int layer = m_model->get_arbiter()->get_slave_layer(targetPortIndex);
     layer = (layer>0)?layer:0;
     if (isSchedulerOp){
       if (t > sc_core::SC_ZERO_TIME)
         {
           sc_core::wait(t);
           t = sc_core::SC_ZERO_TIME;
         }
     }
    sc_core::sc_time initial_time = t;
    if (isNotDebugPort)
      virtualAddress = decoder->getVirtualAddress(targetPortIndex, trans.get_address());
    unsigned portSize = 32;
    if (isNotDebugPort)
      portSize = getPortSize(targetPortIndex);
    const char* portName = isNotDebugPort ? get_port_name(targetPortIndex) : "dbg_port";
    std::vector<long> slavePortIndexArray;
    bool saved_isDebug = isDebug;
    if (trans.get_command() == tlm::TLM_IGNORE_COMMAND) {
      isDebug = true;
    }
    esl::sc_sim::secure_payload* secure_inst = decoder->getSecurePayload();
    if (secure_inst) {
      if (secure_inst->get_security_value(trans) ==
          esl::sc_sim::secure_payload::NON_SECURE)
        decoder->getNonSecuredSlavePortIndexArray(slavePortIndexArray, virtualAddress, portSize, name(), portName, targetPortIndex, isDebug);
      else
        decoder->getSecuredSlavePortIndexArray(slavePortIndexArray, virtualAddress, portSize, name(), portName, targetPortIndex, isDebug);
    } else
      decoder->getSlavePortIndexArray(slavePortIndexArray, virtualAddress, portSize, name(), portName, isDebug);
    if (slavePortIndexArray.size() == 0) {
      trans.set_response_status(tlm::TLM_ADDRESS_ERROR_RESPONSE);
      return 0;
    }

    unsigned status = 1;
    unsigned slavePortsSize = slavePortIndexArray.size();
    bool broadcasting = false;
    if (slavePortsSize > 1 && write_broadcast)
      broadcasting = true;
    returned_time = t;
    
    for (unsigned u = 0; u < slavePortsSize; u++) {
      if (broadcasting) {
        t = initial_time;
      }
      long slavePortIndex = slavePortIndexArray[u];
      // check secure
      if (secure_inst) {
        if (secure_inst->get_security_value(trans) ==
            esl::sc_sim::secure_payload::NON_SECURE &&
            decoder->getSecure(slavePortIndex, targetPortIndex)) {
          trans.set_response_status(tlm::TLM_ADDRESS_ERROR_RESPONSE);
          std::stringstream str;
          str << "attempt to reach a secured device from an unsecured transaction "
              << ": address " << std::dec << trans.get_address()
              << "(0x" << std::hex << trans.get_address() << ")";
          mb::sysc::issue_warning(str.str().c_str(), this->name());
          return 0;
        }
      }
      trans.set_response_status(TLM_OK_RESPONSE);
      
      sc_dt::uint64 baseAddress = decoder->getBaseAddress(slavePortIndex, virtualAddress);
      trans.set_address(baseAddress);
      isDebug = saved_isDebug;
      if (isDebug) {
        unsigned size = get_fw_transport_if(slavePortIndex)->transport_dbg(trans);
        return size;
      } else {
        
        ::papoulis::BusMonitor* busMonitor = 0;
        if (getSystemCBaseModel())
          busMonitor = getSystemCBaseModel()->getBusMonitor();
        if (busMonitor)
          busMonitor->b_transport_tracer_prehook(papoulis::BusMonitor::SlaveSide, targetPortIndex, slavePortIndex, trans, t);                          
        if (!isNotDebugPort)
          disable_T();
        if (busMonitor)
          busMonitor->b_transport_tracer_prehook(papoulis::BusMonitor::MasterSide, targetPortIndex, slavePortIndex, trans, t); 

        if (isSchedulerOp) {
          m_bus_scheduler->update_layer(layer, slavePortIndex, command);
          m_bus_scheduler->register_request(targetPortIndex, layer, command);
          m_bus_scheduler->wait_for_event(targetPortIndex, layer, command, waiting_time);
          if (waiting_time > sc_core::SC_ZERO_TIME)
            sc_core::wait(waiting_time);
          unsigned latency = Papoulis_UserRunningModel_GetBusLatency(owner->getSystemCBaseModel()->getUserRunningModel(),
                                                                     papoulis::getSimulationTime(),
                                                                     targetPortIndex,
                                                                     slavePortIndex,
                                                                     trans.get_data_length(),
                                                                     trans.get_address(),
                                                                     0,
                                                                     0,
                                                                     trans.is_write());
          if (latency > 0)
            wait(latency * clock);
        }
        
        get_fw_transport_if(slavePortIndex)->b_transport(trans, t);

        if (busMonitor)
          busMonitor->b_transport_tracer_posthook(papoulis::BusMonitor::MasterSide, targetPortIndex, slavePortIndex, trans, t); 
        if (!isNotDebugPort)
          enable_T();
        if (busMonitor)
          busMonitor->b_transport_tracer_posthook(papoulis::BusMonitor::SlaveSide, targetPortIndex, slavePortIndex, trans, t);
        if (!trans.is_response_ok())
          status = 0;
      }

      if (t > returned_time)
        returned_time = t;
      if (isSchedulerOp) {
        if (broadcasting)
          m_bus_scheduler->notify_next_queue_task(layer, command, initial_time, slavePortIndex);
        else
          m_bus_scheduler->notify_next_queue_task(layer, command, t, slavePortIndex);
      }
      
      // dont broadcast for read
      if (trans.get_command() == tlm::TLM_READ_COMMAND)
        break;
    }
    t = returned_time;
    return status;
  }

  protected:
   unsigned getPortSize(unsigned portIndex) {
     switch(portIndex) {
     case 1 : {
       return 32 >> 3;
     }
     case 3 : {
       return 32 >> 3;
     }
     case 0 : {
       return 32 >> 3;
     }
     case 2 : {
       return 32 >> 3;
     }
     default:
       assert(0);
     }
     return sizeof(unsigned int);
   }

 protected:
  esl::sc_sim::user_model::Decoder* decoder;
  
  struct TargetPlusOffset {
    TargetPlusOffset(sc_dt::uint64 address, unsigned target_index, signed long long offset) :
      m_address(address), m_target_index(target_index), m_offset(offset) {}
    sc_dt::uint64 m_address;
    unsigned m_target_index;
    signed long long m_offset;
  };
  std::vector<std::deque<TargetPlusOffset> >  m_dmi_request_array;
  void clip_the_range(sc_dt::uint64 address,
                      sc_dt::uint64 &dmiStartAddress,
                      sc_dt::uint64 &dmiEndAddress,
                      unsigned char* &dmiPtr,
                      long slavePortIndex,
                      signed long long offset);
};




/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file is write protected.
//* DO NOT MODIFY THIS FILE.
//*
//* This file is used only for learning the component.
//* It contains the machine architecture class for your axi_bus model.
//* 
//* Model Builder version: 4.1.0
//* Generated on: Feb. 01, 2016 10:58:30 AM, (user: mbradley)
//*>


#pragma once

#include "model_builder.h"


class axi_bus_machine_arch : public MachineArch { 
    
    public:
    
    public:
        
        ////////////////////////////////////////////////////////////////////
        //   function for port: driver
        ////////////////////////////////////////////////////////////////////
        
        //////
        // functions for port: driver, transaction: WRITE
        //////
        
        void transaction_instance__driver__WRITE
          (
            sc_dt::uint64 _address,
            sc_dt::uint64 _size,
            sc_dt::uint64 _data, 
            bool has_been_error, 
            sc_dt::uint64 currentTime
          );
        
        //////
        // functions for port: driver, transaction: READ
        //////
        
        void transaction_instance__driver__READ
          (
            sc_dt::uint64 _address,
            sc_dt::uint64 _size,
            sc_dt::uint64 _data, 
            bool has_been_error, 
            sc_dt::uint64 currentTime
          );
        
        
        
        ////////////////////////////////////////////////////////////////////
        //   function for port: sram_master
        ////////////////////////////////////////////////////////////////////
        
        //////
        // functions for port: sram_master, transaction: WRITE
        //////
        
        void transaction_instance__sram_master__WRITE
          (
            sc_dt::uint64 _address,
            sc_dt::uint64 _size,
            sc_dt::uint64 _data, 
            bool has_been_error, 
            sc_dt::uint64 currentTime
          );
        
        //////
        // functions for port: sram_master, transaction: READ
        //////
        
        void transaction_instance__sram_master__READ
          (
            sc_dt::uint64 _address,
            sc_dt::uint64 _size,
            sc_dt::uint64 _data, 
            bool has_been_error, 
            sc_dt::uint64 currentTime
          );
        
        
        
        ////////////////////////////////////////////////////////////////////
        //   function for port: jpeg_dma
        ////////////////////////////////////////////////////////////////////
        
        //////
        // functions for port: jpeg_dma, transaction: WRITE
        //////
        
        void transaction_instance__jpeg_dma__WRITE
          (
            sc_dt::uint64 _address,
            sc_dt::uint64 _size,
            sc_dt::uint64 _data, 
            bool has_been_error, 
            sc_dt::uint64 currentTime
          );
        
        //////
        // functions for port: jpeg_dma, transaction: READ
        //////
        
        void transaction_instance__jpeg_dma__READ
          (
            sc_dt::uint64 _address,
            sc_dt::uint64 _size,
            sc_dt::uint64 _data, 
            bool has_been_error, 
            sc_dt::uint64 currentTime
          );
        
        
        
        ////////////////////////////////////////////////////////////////////
        //   function for port: jpeg_regs
        ////////////////////////////////////////////////////////////////////
        
        //////
        // functions for port: jpeg_regs, transaction: WRITE
        //////
        
        void transaction_instance__jpeg_regs__WRITE
          (
            sc_dt::uint64 _address,
            sc_dt::uint64 _size,
            sc_dt::uint64 _data, 
            bool has_been_error, 
            sc_dt::uint64 currentTime
          );
        
        //////
        // functions for port: jpeg_regs, transaction: READ
        //////
        
        void transaction_instance__jpeg_regs__READ
          (
            sc_dt::uint64 _address,
            sc_dt::uint64 _size,
            sc_dt::uint64 _data, 
            bool has_been_error, 
            sc_dt::uint64 currentTime
          );
        
        
    
    public:
        void configureClock(unsigned portIndex, sc_dt::uint64 clock) {
          m_clocks[portIndex] = clock;
        }
        void startTransaction(unsigned portIndex, unsigned transactionIndex, sc_dt::uint64 currentTime);
        VariableBase* getVariableBasePtrByName(const char* name);
        Register* getRegisterByName(const char* name);
        virtual void reset();
        
        virtual bool getAddressRange(unsigned portIndex, sc_dt::uint64& begin, sc_dt::uint64& end);
        
    
    public:
        void callTransaction(unsigned portIndex, unsigned transactionIndex, sc_dt::uint64 address, sc_dt::uint64 size, sc_dt::uint64 data, bool has_been_error, sc_dt::uint64 currentTime);
    
    public:
        //constructor
        axi_bus_machine_arch();
    
};

/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file is write protected. 
//* DO NOT MODIFY THIS FILE.
//*
//* This file is generated according to the parameters in the 
//* Model Builder form.
//* 
//* Any change in parameters, policies, ports, protocols, etc. will change this file
//* upon generation of the timing model (using generate_timing_model command).
//* The axi_bus_t will be derived from this class.
//*
//* Model Builder version: 4.1.0
//* Generated on: Feb. 01, 2016 10:58:30 AM, (user: mbradley)
//*>


#pragma once

#include "model_builder.h"
#include "axi_protocol.h"

class axi_bus_t_base: public papoulis::PapoulisBusBaseModel {
public:
  static axi_bus_t_base* create_t(const char* name, long simulation, 
                                        esl::sc_sim::user_model::Arbiter* arbiter = 0);
public:
  axi_bus_t_base(sc_core::sc_module_name& module_name, long simulation,
                       esl::sc_sim::user_model::Arbiter* arbiter = 0);

  enum port_enum {driver, sram_master, jpeg_dma, jpeg_regs};

protected:
  friend class axi_bus_model;

  /* parameters */
  sc_core::sc_time clock;
  sc_core::sc_time axi_clock;
  double nominal_voltage;
  bool verbose_parameters;
  bool dmi_enabled;
  const char* warning_level;
  const char* layers;
  const char* slave_sets;
  unsigned int write_broadcast;
  unsigned int driver_priority;
  const char* driver_vmap;
  unsigned int sram_master_priority;
  unsigned long long sram_master_base_address;
  unsigned long long sram_master_size;
  unsigned int sram_master_subtract_base_address;
  unsigned int sram_master_secure;
  const char* sram_master_additional_ranges;
  unsigned int sram_master_latency;
  unsigned int jpeg_dma_priority;
  const char* jpeg_dma_vmap;
  unsigned int jpeg_regs_priority;
  unsigned long long jpeg_regs_base_address;
  unsigned long long jpeg_regs_size;
  unsigned int jpeg_regs_subtract_base_address;
  unsigned int jpeg_regs_secure;
  const char* jpeg_regs_additional_ranges;
  unsigned int jpeg_regs_latency;

protected:
  long m_simulation;
  
protected:
  void createDecoder(void* userRunningModel);
  
public:
  /* schedule functions */
  void schedule_axi_READ
    (long portIndex,
     sc_dt::uint64 delay,
     long& burstSize,
     esl::include::transaction_power& power , long TR_ID, long ARADDR, long* RDATA, long ARSIZE, long block_size, long ARBURST, long ARLEN, long ARLOCK);
  void schedule_axi_WRITE
    (long portIndex,
     sc_dt::uint64 delay,
     long& burstSize,
     esl::include::transaction_power& power , long TR_ID, long AWADDR, long* WDATA, long AWSIZE, long block_size, long AWBURST, long AWLEN, long AWLOCK);
public:
  /* called when "params.m_phase" is sent through the "port_index" port */
  virtual void sent_phase_cb(unsigned port_index,
                             esl::sc_sim::mb_cb_params& params) {
    sent_phase_cb(port_index, 
                  params.get_payload(), 
                  params.get_phase(), 
                  params.get_time());
  }
                             
  /* called when "params.m_phase" is received by the "port_index" port */
  virtual void received_phase_cb(unsigned port_index,
                                 esl::sc_sim::mb_cb_params& params) {
    received_phase_cb(port_index, 
                      params.get_payload(), 
                      params.get_phase(), 
                      params.get_time());
  }
                             
  /* called when "params.m_phase" is sent through the "master_port_index".
     "params.m_t" is the time (in ps) between the current time
     and the time "params.m_phase" was received by the "slave_port_index */
  virtual void forward_arbitration_cb(unsigned master_port_index,
                                        unsigned slave_port_index,
                                      esl::sc_sim::mb_cb_params& params) {
    forward_arbitration_cb(master_port_index, 
                           slave_port_index,
                           params.get_payload(), 
                           params.get_phase(), 
                           mb::sysc::sc_time_to_ps(params.get_time()));
  }

  /* called when "params.m_phase" is sent through the "slave_port_index".
     "params.m_t" is the time (in ps) between the current time
     and the time "params.m_phase" was received by the "master_port_index */
  virtual void backward_arbitration_cb(unsigned slave_port_index,
                                       unsigned master_port_index,
                                       esl::sc_sim::mb_cb_params& params) {
    backward_arbitration_cb(slave_port_index,
                            master_port_index,
                            params.get_payload(), 
                            params.get_phase(), 
                            mb::sysc::sc_time_to_ps(params.get_time()));
  }
                             

  /* old interface */
  
  virtual void sent_phase_cb(unsigned port_index,
                             tlm::tlm_generic_payload& trans,
                             tlm::tlm_phase& phase, sc_core::sc_time& t) {}
  
  virtual void received_phase_cb(unsigned port_index,
                             tlm::tlm_generic_payload& trans,
                                 tlm::tlm_phase& phase, sc_core::sc_time& t) {}
  
  virtual void forward_arbitration_cb(unsigned master_port_index,
                                      unsigned slave_port_index,
                                      tlm::tlm_generic_payload& trans,
                                      tlm::tlm_phase& phase,
                                      unsigned long long forward_arbitration_time) {}
  
  virtual void backward_arbitration_cb(unsigned slave_port_index,
                                       unsigned master_port_index,
                                       tlm::tlm_generic_payload& trans,
                                       tlm::tlm_phase& phase,
                                       unsigned long long backward_arbitration_time) {}

  // The following callbacks are called whenever there is a transaction start or end in the port
  // If you want to add your own code (like updating the machine architecture object), 
  // you have to overload these functions in your derived class.

  virtual void accept_axi_READ
    (long port_index,
     sc_dt::int64 time,
     long& burst_size,
     sc_dt::uint64& TR_ID,
     sc_dt::uint64 ARADDR,
     sc_dt::uint64 RDATA,
     sc_dt::uint64& ARSIZE,
     sc_dt::uint64 block_size,
     sc_dt::uint64& ARBURST,
     sc_dt::uint64& ARLEN,
     sc_dt::uint64& ARLOCK) = 0;
  virtual void end_axi_READ
    (long port_index,
     sc_dt::uint64 time,
     long& burst_size,
     sc_dt::uint64& TR_ID,
     sc_dt::uint64 ARADDR,
     sc_dt::uint64 RDATA,
     sc_dt::uint64& ARSIZE,
     sc_dt::uint64 block_size,
     sc_dt::uint64& ARBURST,
     sc_dt::uint64& ARLEN,
     sc_dt::uint64& ARLOCK) = 0;

  virtual void accept_axi_WRITE
    (long port_index,
     sc_dt::int64 time,
     long& burst_size,
     sc_dt::uint64& TR_ID,
     sc_dt::uint64 AWADDR,
     sc_dt::uint64 WDATA,
     sc_dt::uint64& AWSIZE,
     sc_dt::uint64 block_size,
     sc_dt::uint64& AWBURST,
     sc_dt::uint64& AWLEN,
     sc_dt::uint64& AWLOCK) = 0;
  virtual void end_axi_WRITE
    (long port_index,
     sc_dt::uint64 time,
     long& burst_size,
     sc_dt::uint64& TR_ID,
     sc_dt::uint64 AWADDR,
     sc_dt::uint64 WDATA,
     sc_dt::uint64& AWSIZE,
     sc_dt::uint64 block_size,
     sc_dt::uint64& AWBURST,
     sc_dt::uint64& AWLEN,
     sc_dt::uint64& AWLOCK) = 0;


protected:
  /* machine architecture */
  axi_bus_machine_arch* m_machine_arch;
  request_type* m_current_request;
private:
  static const unsigned port_count = 4;
  papoulis::SystemCBaseModel::PortDescription port_descriptions[port_count];

protected:
  virtual void vista_trace(bool isStart, request_type* request, long portIndex, sc_dt::uint64 startTime);
 protected:
  std::vector<esl::sc_sim::pipeline_policy*> m_pipeline_vector;
  std::vector<esl::sc_sim::delay_policy*> m_delay_vector;
  std::vector<esl::sc_sim::uniform_bus_policy*> m_bus_vector;
  std::vector<esl::sc_sim::power_policy*> m_power_vector;
  
  static const unsigned user_pipeline_policy_count = 4;
  papoulis::SystemCBaseModel::UserPipelinePolicyDescription user_pipeline_policy_descriptions[user_pipeline_policy_count];
 public:
  virtual void update_power_parameters(esl::sc_sim::power_policy* handle);
  virtual void update_delay_parameters(esl::sc_sim::delay_policy* handle);
  virtual void update_bus_parameters(esl::sc_sim::uniform_bus_policy* handle);
  virtual void update_pipeline_parameters(esl::sc_sim::pipeline_policy* handle);
public:
  virtual unsigned get_layer(unsigned port_index);
  virtual request_type* get_current_request();
  virtual unsigned get_slave_port_index();
  virtual MachineArch* getMachineArch() const {
    return m_machine_arch;
  } 
  virtual bool portHasRegisters(unsigned portIndex) {return false;}
  
  virtual bool triggerRegistersGotHit(unsigned portIndex, tlm::tlm_generic_payload& trans) {
    return false;
  }

  virtual const char* get_library_name() {return "Models";}
  virtual const char* get_model_vendor() {return "Mentor.com";}
  virtual const char* get_model_version() {return "1.0";}
  
};

/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file is write protected.
//* DO NOT MODIFY THIS FILE.
//*
//* This file contains the PVT class for axi_bus.
//* It connects between the PV and T models.
//* Your top-level design should instantiate this model.
//* 
//* In order to synchronize the activty between the PV and the T models, every 
//* PV transaction is monitored and queued in the T sync ports.
//* Whenever a synchronization point is reached, the T models are executed and 
//* the corresponding T transactions are launched.
//* A synchronization point is reached whenever there is a wait statement on a testbench thread. 
//*
//* Model Builder version: 4.1.0
//* Generated on: Feb. 01, 2016 10:58:30 AM, (user: mbradley)
//*>


#pragma once

#include "model_builder.h"



 


// forward declaration for pv class
class axi_bus_pv;



using namespace std;

class axi_bus_pvt_param_defaults {
  
public:
  axi_bus_pvt_param_defaults(const char* hier_name) {

    sc_core::sc_time clock;
    sc_core::sc_time axi_clock;
    double nominal_voltage;
    bool verbose_parameters;
    bool dmi_enabled;
    const char* warning_level;
    const char* layers;
    const char* slave_sets;
    unsigned int write_broadcast;
    unsigned int driver_priority;
    const char* driver_vmap;
    unsigned int sram_master_priority;
    unsigned long long sram_master_base_address;
    unsigned long long sram_master_size;
    unsigned int sram_master_subtract_base_address;
    unsigned int sram_master_secure;
    const char* sram_master_additional_ranges;
    unsigned int sram_master_latency;
    unsigned int jpeg_dma_priority;
    const char* jpeg_dma_vmap;
    unsigned int jpeg_regs_priority;
    unsigned long long jpeg_regs_base_address;
    unsigned long long jpeg_regs_size;
    unsigned int jpeg_regs_subtract_base_address;
    unsigned int jpeg_regs_secure;
    const char* jpeg_regs_additional_ranges;
    unsigned int jpeg_regs_latency;
    clock = ::mb::sysc::sdInitParameter<sc_core::sc_time>("clock", sc_core::sc_time(10, sc_core::SC_NS), hier_name);
    axi_clock = ::mb::sysc::sdInitParameter<sc_core::sc_time>("axi_clock", clock, hier_name);
    nominal_voltage = ::mb::sysc::sdInitParameter<double>("nominal_voltage", 1, hier_name);
    verbose_parameters = ::mb::sysc::sdInitParameter<bool>("verbose_parameters", true, hier_name);
    dmi_enabled = ::mb::sysc::sdInitParameter<bool>("dmi_enabled", true, hier_name);
    warning_level = ::mb::sysc::sdInitParameter<const char*>("warning_level", "WARNING", hier_name);
    layers = ::mb::sysc::sdInitParameter<const char*>("layers", "", hier_name);
    slave_sets = ::mb::sysc::sdInitParameter<const char*>("slave_sets", "", hier_name);
    write_broadcast = ::mb::sysc::sdInitParameter<unsigned int>("write_broadcast", 0, hier_name);
    driver_priority = ::mb::sysc::sdInitParameter<unsigned int>("driver_priority", 0, hier_name);
    driver_vmap = ::mb::sysc::sdInitParameter<const char*>("driver_vmap", "", hier_name);
    sram_master_priority = ::mb::sysc::sdInitParameter<unsigned int>("sram_master_priority", 0, hier_name);
    sram_master_base_address = ::mb::sysc::sdInitParameter<unsigned long long>("sram_master_base_address", 0, hier_name);
    sram_master_size = ::mb::sysc::sdInitParameter<unsigned long long>("sram_master_size", 0x40000000, hier_name);
    sram_master_subtract_base_address = ::mb::sysc::sdInitParameter<unsigned int>("sram_master_subtract_base_address", 1, hier_name);
    sram_master_secure = ::mb::sysc::sdInitParameter<unsigned int>("sram_master_secure", 0, hier_name);
    sram_master_additional_ranges = ::mb::sysc::sdInitParameter<const char*>("sram_master_additional_ranges", "", hier_name);
    sram_master_latency = ::mb::sysc::sdInitParameter<unsigned int>("sram_master_latency", 0, hier_name);
    jpeg_dma_priority = ::mb::sysc::sdInitParameter<unsigned int>("jpeg_dma_priority", 0, hier_name);
    jpeg_dma_vmap = ::mb::sysc::sdInitParameter<const char*>("jpeg_dma_vmap", "", hier_name);
    jpeg_regs_priority = ::mb::sysc::sdInitParameter<unsigned int>("jpeg_regs_priority", 0, hier_name);
    jpeg_regs_base_address = ::mb::sysc::sdInitParameter<unsigned long long>("jpeg_regs_base_address", 0xE0000000, hier_name);
    jpeg_regs_size = ::mb::sysc::sdInitParameter<unsigned long long>("jpeg_regs_size", 0x100, hier_name);
    jpeg_regs_subtract_base_address = ::mb::sysc::sdInitParameter<unsigned int>("jpeg_regs_subtract_base_address", 1, hier_name);
    jpeg_regs_secure = ::mb::sysc::sdInitParameter<unsigned int>("jpeg_regs_secure", 0, hier_name);
    jpeg_regs_additional_ranges = ::mb::sysc::sdInitParameter<const char*>("jpeg_regs_additional_ranges", "", hier_name);
    jpeg_regs_latency = ::mb::sysc::sdInitParameter<unsigned int>("jpeg_regs_latency", 0, hier_name);
    ::mb::sysc::sdPropagateParameters();
  }

  axi_bus_pvt_param_defaults(const char* hier_name, sc_core::sc_time clock_init, sc_core::sc_time axi_clock_init, double nominal_voltage_init, bool verbose_parameters_init, bool dmi_enabled_init, const char* warning_level_init, const char* layers_init, const char* slave_sets_init, unsigned int write_broadcast_init, unsigned int driver_priority_init, const char* driver_vmap_init, unsigned int sram_master_priority_init, unsigned long long sram_master_base_address_init, unsigned long long sram_master_size_init, unsigned int sram_master_subtract_base_address_init, unsigned int sram_master_secure_init, const char* sram_master_additional_ranges_init, unsigned int sram_master_latency_init, unsigned int jpeg_dma_priority_init, const char* jpeg_dma_vmap_init, unsigned int jpeg_regs_priority_init, unsigned long long jpeg_regs_base_address_init, unsigned long long jpeg_regs_size_init, unsigned int jpeg_regs_subtract_base_address_init, unsigned int jpeg_regs_secure_init, const char* jpeg_regs_additional_ranges_init, unsigned int jpeg_regs_latency_init) {

    sc_core::sc_time clock;
    sc_core::sc_time axi_clock;
    double nominal_voltage;
    bool verbose_parameters;
    bool dmi_enabled;
    const char* warning_level;
    const char* layers;
    const char* slave_sets;
    unsigned int write_broadcast;
    unsigned int driver_priority;
    const char* driver_vmap;
    unsigned int sram_master_priority;
    unsigned long long sram_master_base_address;
    unsigned long long sram_master_size;
    unsigned int sram_master_subtract_base_address;
    unsigned int sram_master_secure;
    const char* sram_master_additional_ranges;
    unsigned int sram_master_latency;
    unsigned int jpeg_dma_priority;
    const char* jpeg_dma_vmap;
    unsigned int jpeg_regs_priority;
    unsigned long long jpeg_regs_base_address;
    unsigned long long jpeg_regs_size;
    unsigned int jpeg_regs_subtract_base_address;
    unsigned int jpeg_regs_secure;
    const char* jpeg_regs_additional_ranges;
    unsigned int jpeg_regs_latency;
    clock = ::mb::sysc::sdInitParameter<sc_core::sc_time>("clock", clock_init, hier_name);
    axi_clock = ::mb::sysc::sdInitParameter<sc_core::sc_time>("axi_clock", axi_clock_init, hier_name);
    nominal_voltage = ::mb::sysc::sdInitParameter<double>("nominal_voltage", nominal_voltage_init, hier_name);
    verbose_parameters = ::mb::sysc::sdInitParameter<bool>("verbose_parameters", verbose_parameters_init, hier_name);
    dmi_enabled = ::mb::sysc::sdInitParameter<bool>("dmi_enabled", dmi_enabled_init, hier_name);
    warning_level = ::mb::sysc::sdInitParameter<const char*>("warning_level", warning_level_init, hier_name);
    layers = ::mb::sysc::sdInitParameter<const char*>("layers", layers_init, hier_name);
    slave_sets = ::mb::sysc::sdInitParameter<const char*>("slave_sets", slave_sets_init, hier_name);
    write_broadcast = ::mb::sysc::sdInitParameter<unsigned int>("write_broadcast", write_broadcast_init, hier_name);
    driver_priority = ::mb::sysc::sdInitParameter<unsigned int>("driver_priority", driver_priority_init, hier_name);
    driver_vmap = ::mb::sysc::sdInitParameter<const char*>("driver_vmap", driver_vmap_init, hier_name);
    sram_master_priority = ::mb::sysc::sdInitParameter<unsigned int>("sram_master_priority", sram_master_priority_init, hier_name);
    sram_master_base_address = ::mb::sysc::sdInitParameter<unsigned long long>("sram_master_base_address", sram_master_base_address_init, hier_name);
    sram_master_size = ::mb::sysc::sdInitParameter<unsigned long long>("sram_master_size", sram_master_size_init, hier_name);
    sram_master_subtract_base_address = ::mb::sysc::sdInitParameter<unsigned int>("sram_master_subtract_base_address", sram_master_subtract_base_address_init, hier_name);
    sram_master_secure = ::mb::sysc::sdInitParameter<unsigned int>("sram_master_secure", sram_master_secure_init, hier_name);
    sram_master_additional_ranges = ::mb::sysc::sdInitParameter<const char*>("sram_master_additional_ranges", sram_master_additional_ranges_init, hier_name);
    sram_master_latency = ::mb::sysc::sdInitParameter<unsigned int>("sram_master_latency", sram_master_latency_init, hier_name);
    jpeg_dma_priority = ::mb::sysc::sdInitParameter<unsigned int>("jpeg_dma_priority", jpeg_dma_priority_init, hier_name);
    jpeg_dma_vmap = ::mb::sysc::sdInitParameter<const char*>("jpeg_dma_vmap", jpeg_dma_vmap_init, hier_name);
    jpeg_regs_priority = ::mb::sysc::sdInitParameter<unsigned int>("jpeg_regs_priority", jpeg_regs_priority_init, hier_name);
    jpeg_regs_base_address = ::mb::sysc::sdInitParameter<unsigned long long>("jpeg_regs_base_address", jpeg_regs_base_address_init, hier_name);
    jpeg_regs_size = ::mb::sysc::sdInitParameter<unsigned long long>("jpeg_regs_size", jpeg_regs_size_init, hier_name);
    jpeg_regs_subtract_base_address = ::mb::sysc::sdInitParameter<unsigned int>("jpeg_regs_subtract_base_address", jpeg_regs_subtract_base_address_init, hier_name);
    jpeg_regs_secure = ::mb::sysc::sdInitParameter<unsigned int>("jpeg_regs_secure", jpeg_regs_secure_init, hier_name);
    jpeg_regs_additional_ranges = ::mb::sysc::sdInitParameter<const char*>("jpeg_regs_additional_ranges", jpeg_regs_additional_ranges_init, hier_name);
    jpeg_regs_latency = ::mb::sysc::sdInitParameter<unsigned int>("jpeg_regs_latency", jpeg_regs_latency_init, hier_name);

    ::mb::sysc::sdPropagateParameters();
    }

  axi_bus_pvt_param_defaults(const char* hier_name, std::vector<std::pair<char*, unsigned int> > &change_parameters){

    sc_core::sc_time clock;
    sc_core::sc_time axi_clock;
    double nominal_voltage;
    bool verbose_parameters;
    bool dmi_enabled;
    const char* warning_level;
    const char* layers;
    const char* slave_sets;
    unsigned int write_broadcast;
    unsigned int driver_priority;
    const char* driver_vmap;
    unsigned int sram_master_priority;
    unsigned long long sram_master_base_address;
    unsigned long long sram_master_size;
    unsigned int sram_master_subtract_base_address;
    unsigned int sram_master_secure;
    const char* sram_master_additional_ranges;
    unsigned int sram_master_latency;
    unsigned int jpeg_dma_priority;
    const char* jpeg_dma_vmap;
    unsigned int jpeg_regs_priority;
    unsigned long long jpeg_regs_base_address;
    unsigned long long jpeg_regs_size;
    unsigned int jpeg_regs_subtract_base_address;
    unsigned int jpeg_regs_secure;
    const char* jpeg_regs_additional_ranges;
    unsigned int jpeg_regs_latency;
    for (unsigned i =0; i<change_parameters.size(); i++){
      ::mb::sysc::sdInitParameter<unsigned int>(change_parameters[i].first, change_parameters[i].second, hier_name);
    }

    clock = ::mb::sysc::sdInitParameter<sc_core::sc_time>("clock", sc_core::sc_time(10, sc_core::SC_NS), hier_name);
    axi_clock = ::mb::sysc::sdInitParameter<sc_core::sc_time>("axi_clock", clock, hier_name);
    nominal_voltage = ::mb::sysc::sdInitParameter<double>("nominal_voltage", 1, hier_name);
    verbose_parameters = ::mb::sysc::sdInitParameter<bool>("verbose_parameters", true, hier_name);
    dmi_enabled = ::mb::sysc::sdInitParameter<bool>("dmi_enabled", true, hier_name);
    warning_level = ::mb::sysc::sdInitParameter<const char*>("warning_level", "WARNING", hier_name);
    layers = ::mb::sysc::sdInitParameter<const char*>("layers", "", hier_name);
    slave_sets = ::mb::sysc::sdInitParameter<const char*>("slave_sets", "", hier_name);
    write_broadcast = ::mb::sysc::sdInitParameter<unsigned int>("write_broadcast", 0, hier_name);
    driver_priority = ::mb::sysc::sdInitParameter<unsigned int>("driver_priority", 0, hier_name);
    driver_vmap = ::mb::sysc::sdInitParameter<const char*>("driver_vmap", "", hier_name);
    sram_master_priority = ::mb::sysc::sdInitParameter<unsigned int>("sram_master_priority", 0, hier_name);
    sram_master_base_address = ::mb::sysc::sdInitParameter<unsigned long long>("sram_master_base_address", 0, hier_name);
    sram_master_size = ::mb::sysc::sdInitParameter<unsigned long long>("sram_master_size", 0x40000000, hier_name);
    sram_master_subtract_base_address = ::mb::sysc::sdInitParameter<unsigned int>("sram_master_subtract_base_address", 1, hier_name);
    sram_master_secure = ::mb::sysc::sdInitParameter<unsigned int>("sram_master_secure", 0, hier_name);
    sram_master_additional_ranges = ::mb::sysc::sdInitParameter<const char*>("sram_master_additional_ranges", "", hier_name);
    sram_master_latency = ::mb::sysc::sdInitParameter<unsigned int>("sram_master_latency", 0, hier_name);
    jpeg_dma_priority = ::mb::sysc::sdInitParameter<unsigned int>("jpeg_dma_priority", 0, hier_name);
    jpeg_dma_vmap = ::mb::sysc::sdInitParameter<const char*>("jpeg_dma_vmap", "", hier_name);
    jpeg_regs_priority = ::mb::sysc::sdInitParameter<unsigned int>("jpeg_regs_priority", 0, hier_name);
    jpeg_regs_base_address = ::mb::sysc::sdInitParameter<unsigned long long>("jpeg_regs_base_address", 0xE0000000, hier_name);
    jpeg_regs_size = ::mb::sysc::sdInitParameter<unsigned long long>("jpeg_regs_size", 0x100, hier_name);
    jpeg_regs_subtract_base_address = ::mb::sysc::sdInitParameter<unsigned int>("jpeg_regs_subtract_base_address", 1, hier_name);
    jpeg_regs_secure = ::mb::sysc::sdInitParameter<unsigned int>("jpeg_regs_secure", 0, hier_name);
    jpeg_regs_additional_ranges = ::mb::sysc::sdInitParameter<const char*>("jpeg_regs_additional_ranges", "", hier_name);
    jpeg_regs_latency = ::mb::sysc::sdInitParameter<unsigned int>("jpeg_regs_latency", 0, hier_name);  

    ::mb::sysc::sdPropagateParameters();
  }
  
  //void set_clock (

};

class axi_bus_pvt : public esl::sc_sim::PVTBaseModel, 
                          public mb::utl::cb_owner,
                          private axi_bus_pvt_param_defaults {

 public:
  typedef axi_bus_pvt self_type;

 public: 
  // Constructor
  axi_bus_pvt(sc_core::sc_module_name module_name); 
  axi_bus_pvt(sc_core::sc_module_name module_name, sc_core::sc_time clock_init, sc_core::sc_time axi_clock_init, double nominal_voltage_init, bool verbose_parameters_init, bool dmi_enabled_init, const char* warning_level_init, const char* layers_init, const char* slave_sets_init, unsigned int write_broadcast_init, unsigned int driver_priority_init, const char* driver_vmap_init, unsigned int sram_master_priority_init, unsigned long long sram_master_base_address_init, unsigned long long sram_master_size_init, unsigned int sram_master_subtract_base_address_init, unsigned int sram_master_secure_init, const char* sram_master_additional_ranges_init, unsigned int sram_master_latency_init, unsigned int jpeg_dma_priority_init, const char* jpeg_dma_vmap_init, unsigned int jpeg_regs_priority_init, unsigned long long jpeg_regs_base_address_init, unsigned long long jpeg_regs_size_init, unsigned int jpeg_regs_subtract_base_address_init, unsigned int jpeg_regs_secure_init, const char* jpeg_regs_additional_ranges_init, unsigned int jpeg_regs_latency_init); 
  axi_bus_pvt(sc_core::sc_module_name module_name, std::vector<std::pair<char*, unsigned int> > &change_parameters);
  ~axi_bus_pvt(); 

 
 public:
    //access the T instance
  inline axi_bus_t_base* getT() const {
    return m_axi_bus_t;
  }
  
  //access the PV instance
  inline axi_bus_pv* getPV() const {
    return m_axi_bus_pv;
  }

  virtual const SystemCBaseModel* getSystemCBaseModel() const {
    return getT();
  }
  virtual SystemCBaseModel* getSystemCBaseModel() {
    return getT();
  }
  

 private:
  void bind();
  

  void b_transport_outside_sram_master(tlm::tlm_generic_payload& p, sc_core::sc_time& t);
  unsigned int transport_dbg_outside_sram_master(tlm::tlm_generic_payload& p);
  void b_transport_outside_jpeg_regs(tlm::tlm_generic_payload& p, sc_core::sc_time& t);
  unsigned int transport_dbg_outside_jpeg_regs(tlm::tlm_generic_payload& p); 

 private:
  
  //T instance
  axi_bus_t_base* m_axi_bus_t;
  
  //PV instance
  axi_bus_pv* m_axi_bus_pv;

 public:
  // External ports

  typedef mb::tlm20::interface_initiator_socket<32, axi_protocol_types, 1, sc_core::SC_ZERO_OR_MORE_BOUND> sram_master_type;
  sram_master_type sram_master;
  typedef mb::tlm20::interface_initiator_socket<32, axi_protocol_types, 1, sc_core::SC_ZERO_OR_MORE_BOUND> jpeg_regs_type;
  jpeg_regs_type jpeg_regs;
  typedef mb::tlm20::interface_target_socket<32, axi_protocol_types, 1, sc_core::SC_ZERO_OR_MORE_BOUND> driver_type;
  driver_type driver;
  typedef mb::tlm20::interface_target_socket<32, axi_protocol_types, 1, sc_core::SC_ZERO_OR_MORE_BOUND> jpeg_dma_type;
  jpeg_dma_type jpeg_dma;

 private:
  // PV connection ports

  typedef mb::tlm20::target_socket_cb<32> sram_master_entry_type;
  sram_master_entry_type sram_master_entry;
  typedef mb::tlm20::target_socket_cb<32> jpeg_regs_entry_type;
  jpeg_regs_entry_type jpeg_regs_entry;
  typedef mb::tlm20::initiator_socket_cb<32> driver_entry_type;
  driver_entry_type driver_entry;
  typedef mb::tlm20::initiator_socket_cb<32> jpeg_dma_entry_type;
  jpeg_dma_entry_type jpeg_dma_entry;      

 public:
  sc_core::sc_time sram_master_time;

  sc_core::sc_time jpeg_regs_time;


 private:

  struct sram_master_nb_connector : public tlm::tlm_fw_nonblocking_transport_if<>, public ::mb::tlm20::socket_tracer_holder {
    axi_bus_pvt& m_owner;
    sram_master_nb_connector(axi_bus_pvt& owner) : m_owner(owner) {
    }
    virtual tlm::tlm_sync_enum nb_transport_fw(tlm::tlm_generic_payload& trans, 
                                               tlm::tlm_phase& phase, 
                                               sc_core::sc_time& t) {
      return m_owner.sram_master.nb_transport_fw((axi_protocol_types::tlm_payload_type&)trans, phase, t);
    }
    virtual ::mb::tlm20::socket_tracer *get_socket_tracer() {
      return &m_owner.sram_master;
    }
  };
  friend struct sram_master_nb_connector;
  sram_master_nb_connector m_sram_master_nb_connector;

  struct jpeg_regs_nb_connector : public tlm::tlm_fw_nonblocking_transport_if<>, public ::mb::tlm20::socket_tracer_holder {
    axi_bus_pvt& m_owner;
    jpeg_regs_nb_connector(axi_bus_pvt& owner) : m_owner(owner) {
    }
    virtual tlm::tlm_sync_enum nb_transport_fw(tlm::tlm_generic_payload& trans, 
                                               tlm::tlm_phase& phase, 
                                               sc_core::sc_time& t) {
      return m_owner.jpeg_regs.nb_transport_fw((axi_protocol_types::tlm_payload_type&)trans, phase, t);
    }
    virtual ::mb::tlm20::socket_tracer *get_socket_tracer() {
      return &m_owner.jpeg_regs;
    }
  };
  friend struct jpeg_regs_nb_connector;
  jpeg_regs_nb_connector m_jpeg_regs_nb_connector;



  struct driver_nb_connector : public tlm::tlm_bw_nonblocking_transport_if<>, public ::mb::tlm20::socket_tracer_holder {
    axi_bus_pvt& m_owner;
    driver_nb_connector(axi_bus_pvt& owner) : m_owner(owner) {
    }
    virtual tlm::tlm_sync_enum nb_transport_bw(tlm::tlm_generic_payload& trans, 
                                               tlm::tlm_phase& phase, 
                                               sc_core::sc_time& t) {
      return m_owner.driver.nb_transport_bw((axi_protocol_types::tlm_payload_type&)trans, phase, t);
    }
    virtual ::mb::tlm20::socket_tracer *get_socket_tracer() {
      return &m_owner.driver;
    }
  };
  friend struct driver_nb_connector;
  driver_nb_connector m_driver_nb_connector;

  struct jpeg_dma_nb_connector : public tlm::tlm_bw_nonblocking_transport_if<>, public ::mb::tlm20::socket_tracer_holder {
    axi_bus_pvt& m_owner;
    jpeg_dma_nb_connector(axi_bus_pvt& owner) : m_owner(owner) {
    }
    virtual tlm::tlm_sync_enum nb_transport_bw(tlm::tlm_generic_payload& trans, 
                                               tlm::tlm_phase& phase, 
                                               sc_core::sc_time& t) {
      return m_owner.jpeg_dma.nb_transport_bw((axi_protocol_types::tlm_payload_type&)trans, phase, t);
    }
    virtual ::mb::tlm20::socket_tracer *get_socket_tracer() {
      return &m_owner.jpeg_dma;
    }
  };
  friend struct jpeg_dma_nb_connector;
  jpeg_dma_nb_connector m_jpeg_dma_nb_connector;

  

  tlm::tlm_sync_enum receive_nb_transport_sram_master(tlm::tlm_generic_payload& trans,
                                                       tlm::tlm_phase& phase,
                                                       sc_core::sc_time& t) {
    return getT()->receive_nb_transport(1, trans, phase, t);
  }
  tlm::tlm_sync_enum receive_nb_transport_jpeg_regs(tlm::tlm_generic_payload& trans,
                                                       tlm::tlm_phase& phase,
                                                       sc_core::sc_time& t) {
    return getT()->receive_nb_transport(3, trans, phase, t);
  }
  tlm::tlm_sync_enum receive_nb_transport_driver(tlm::tlm_generic_payload& trans,
                                                    tlm::tlm_phase& phase,
                                                    sc_core::sc_time& t) {
    return getT()->receive_nb_transport(0, trans, phase, t);
  }
  tlm::tlm_sync_enum receive_nb_transport_jpeg_dma(tlm::tlm_generic_payload& trans,
                                                    tlm::tlm_phase& phase,
                                                    sc_core::sc_time& t) {
    return getT()->receive_nb_transport(2, trans, phase, t);
  }

};



